webpack собирает из src в dist

npm init //создать package.json

npm i webpack --save-dev //установить модуль

npm i webpack-cli --save-dev

package.json    //  "scripts": {
                      "build": "webpack" // --mode production //более зжатый и эфективней
                    }                       --mode development //ускорение процесса зборки

/src/index.js     //появиться /dist/main.js

index.html

npm i jquery --save

--save попадает в dependencies модули для этогового кода
--save-dev попадает в devDependencies модули нужные для зборки

npm i webpack-dev-server --save-dev

package.json    //  "scripts": {
                      "dev": "webpack-dev-server --mode development" //Project is running at http://localhost:8080/
                                                                    --open  //запуск в браузере
                    }

webpack-dev-server не обновляет папку dist он ее создает в памяти
браузеру нужно объяснить от куда этот файл надо брать
для этого нужно создать файл webpack.config.js
                                        let conf = {

                                        };
                                        module.exports = conf;

установит модуль относительного пути
npm i path --save-dev
подключить в webpack.config.js
let path = require("path")
вызвать команду path: path.resolve() //соединяет пути
publicPath: 'dist/' //не создает папку dist и запускает проект в браузере
                      и работает браузер-синк , при изменении в коде меняеться
                      в браузере
devServer: {
    overlay: true //ошибки не в консоле,а в браузере
}

npm i babel-core
      babel-loader
      babel-preset-env //перегонка из нового стандарта в старый
      babel-preset-stage-3 самые новые возможности которые появились в стандарте
.babelrc

подключить и переработать js файлы
директива module: {
    rules: [] //правило с каким расширением,что мы делаем
}

подключаем css
npm i style-loader css-loader --save-dev
src/css/style.css // можно разместить и выше папки src,
                    но лучше в ней, чтоб webpack обробатывал
добавить
    module: {
        rules: [
            {
                test: /\.css$/,
                use: [
                    'style-loader',
                    'css-loader'
                    ]
            }

npm i bootstrap --save
import 'bootstrap/dist/css/bootstrap.min.css';

https://www.npmjs.com/package/extract-text-webpack-plugin
npm i extract-text-webpack-plugin@next --save-dev //@next бетта версия
let ExtractTextPlugin = require("extract-text-webpack-plugin");
  plugins: [
    new ExtractTextPlugin("styles.css"),
  ]
  use: ExtractTextPlugin.extract({
      fallback: "style-loader",// отменяем действие style-loader,можне и не откатываться
      use: "css-loader"
  })
  <link rel="stylesheet" href="dist/styles.css">